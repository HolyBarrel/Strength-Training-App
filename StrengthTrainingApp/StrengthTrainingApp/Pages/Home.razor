@page "/"
@using StrengthTrainingApp.DataTransferObjects
@using StrengthTrainingApp.Services.Interfaces
@inject IAuthService AuthService
@inject IFullWorkoutService FullWorkoutService
@inject ISecureStorage SecureStorage

<div class="home-content-container">
    
        <h1 class="home-header">Strength Training</h1>
    @if (!_loggedIn)
    {
        <div class="login-container">
            <label for="email">Email:</label><br>
            <input type="email" id="email" name="email" required @bind="_email"><br>
            <label for="password">Password:</label><br>
            <input type="password" id="password" name="password" required @bind="_password"><br>
            <button class="login-button" @onclick="Authenticate">Log in</button>
        </div>


    }
    else
    {
        @if (_workouts != null)
        {
            <Workouts WorkoutRecords="_workouts" />
        }
    }
    
    
    @if (!string.IsNullOrEmpty(_exceptionMessage))
    {
        <p>@_exceptionMessage</p>
    }

</div>

@code
{
    private string _token = "";

    private string _email = "";

    private string _password = "";

    private string _exceptionMessage = "";

    private bool _loggedIn = false;

    private List<FullWorkoutRecord> _workouts;


    private async Task Authenticate()
    {
        try
        {
            var token = await AuthService.Authenticate(_email, _password);
            _token = token;
            _loggedIn = true;
            await SecureStorage.SetAsync("access_token", token);
            await FullWorkoutService.Setup();

            _workouts = await FullWorkoutService.GetAllFullWorkoutRecords();
            StateHasChanged();
        }
        catch (Exception e)
        {
            _exceptionMessage = e.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

}
